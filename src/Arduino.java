import java.io.BufferedWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;


public class Arduino {
	public static boolean writeIntro(BufferedWriter  bw) {
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyy HH:mm:ss");
		Calendar cal = Calendar.getInstance();


		try {
			bw.append("/*\n");
			bw.append("This code has been generated by Song_Creater.java and is intended for an Arduino. \n"); 
			bw.append("Created by Aaron Pollon\n");
			bw.append("Created on " + dateFormat.format(cal.getTime()) + "\n");
			bw.append("*/\n\n");
			return true;

		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}


	public static boolean writeDefines(BufferedWriter  bw, Object[] chs) {

		try {			
			for(int i=0; i<chs.length; i++) {
				if(chs[i] != null){
					Channel c = (Channel) chs[i];
					bw.append("#define " + c.getChVar() + " " +c.getArduinoPin() + "\n");
				}
			}
			bw.append("\n");
			return true;
		}

		catch(Exception e) {
			System.err.println("Error: Unable to print cues");
			return false;
		}
	}

	public static boolean writeSongGlobals(BufferedWriter bw, Song song){
		try {	
			bw.append("// include SPI, MP3 and SD libraries\n");
			bw.append("#include <SPI.h>\n");
			bw.append("#include <Adafruit_VS1053.h>\n");
			bw.append("#include <SD.h>\n");
			bw.append("// These are the pins used for the music maker shield\n");
			bw.append("#define SHIELD_RESET  -1      // VS1053 reset pin (unused!)\n");
			bw.append("#define SHIELD_CS     7      // VS1053 chip select pin (output)\n");
			bw.append("#define SHIELD_DCS    6      // VS1053 Data/command select pin (output)\n");
			bw.append("// These are common pins between breakout and shield\n");
			bw.append("#define CARDCS 4     // Card chip select pin\n");
			bw.append("// DREQ should be an Int pin, see http://arduino.cc/en/Reference/attachInterrupt\n");
			bw.append("#define DREQ 3       // VS1053 Data request, ideally an Interrupt pin\n");
			bw.append("Adafruit_VS1053_FilePlayer musicPlayer = Adafruit_VS1053_FilePlayer(SHIELD_RESET, SHIELD_CS, SHIELD_DCS, DREQ, CARDCS);\n");
			bw.append("boolean playMusic = " + song.getPlayMusic() + ";\n");
			bw.append("int input;\n");
			bw.append("boolean hasInput;\n");
			bw.append("int count = 0; //Counts input digits\n");
			bw.append("int *digits; //Points to array of input digits\n");
			bw.append("double lagMod = " + song.getLagMod() + ";\n");
			bw.append("int numChs = 8;\n");
			bw.append("const char* track = \"" + song.getSDSongName() + "\";\n");

			return true;
		}

		catch(Exception e) {
			System.err.println("Error: Unable to print cues");
			return false;
		}
	}

	public static boolean writeSetup(BufferedWriter  bw, Object[] chs) {
		try {
			bw.append("Serial.begin(9600);\n");

			for(int i=0; i<chs.length; i++) {
				if(chs[i] != null){
					Channel c = (Channel) chs[i];
					bw.append("pinMode(" + c.getChVar() +", OUTPUT);\n");
				}
			}

			bw.append("Serial.print(\"Setup Complete\");\n");
			bw.append("delay(2000);\n");
			return true;
		}

		catch(Exception e) {
			System.err.println("Error: Unable to print cues");
			return false;
		}
	}

	public static boolean writeSongSetup(BufferedWriter bw, Song song) {
		try{
			bw.append("// initialise the music player\n");
			bw.append("if(playMusic){\n");
			bw.append("if (! musicPlayer.begin()) { // initialise the music player\n");
			bw.append("Serial.println(F(\"Couldn't find VS1053, do you have the right pins defined?\"));\n");
			bw.append("while (1);\n");
			bw.append("}\n");
			bw.append("Serial.println(F(\"VS1053 found\"));\n");
			bw.append(" if (!SD.begin(CARDCS)) {\n");
			bw.append(" Serial.println(F(\"SD failed, or not present\"));\n");
			bw.append(" while (1);  // don't do anything more\n");
			bw.append("}\n");
			bw.append("Serial.println(\"SD OK!\");\n");
			bw.append("// Set volume for left, right channels. lower numbers == louder volume!\n");
			bw.append(" musicPlayer.setVolume("+song.getVolume() + ","+song.getVolume() + ");\n");
			bw.append(" if (! musicPlayer.useInterrupt(VS1053_FILEPLAYER_PIN_INT))\n");
			bw.append("  Serial.println(F(\"DREQ pin is not an interrupt pin\"));\n");
			bw.append(" }\n");
			return true;
		}
		catch(Exception e){
			System.err.println("Error: Unable to print cues");
			return false;
		}
	}


	public static boolean digitalWrite(BufferedWriter bw, Channel c, boolean on) {
		String state = "HIGH";
		if(!on) state = "LOW";


		try {
			bw.append("digitalWrite(" +c.getChVar() + ", " + state + ");\n");
			return true;
		}
		catch (Exception e) {
			System.err.println("Unable to write state to file");
			return false;
		}
	}

	public static boolean writeDelay(BufferedWriter bw, double delay) {
		try {
			bw.append("delay(" + delay + " * lagMod);\n");
			return true;
		}
		catch (Exception e) {
			System.err.println("Unable to write delay to file");
			return false;
		}
	}
	public static boolean writeCountdown(BufferedWriter bw, int start) {
		try {
			bw.append("Serial.println(\"Starting...\");\n");
			bw.append("for (int i = 0; i<" + start + "; i++){\n");
			bw.append("Serial.println("+start + "-i);\n");
			bw.append("delay(1000);\n");
			bw.append("}\n");
			bw.append("Serial.println(\"GO!\");\n");
			bw.append("\n\n");
			bw.append("if(playMusic){\n");
			bw.append("if(!musicPlayer.playingMusic){\n");
			bw.append("// Start playing a file, then we can do stuff while waiting for it to finish\n");
			bw.append("if (! musicPlayer.startPlayingFile(track)) {\n");
			bw.append("Serial.println(\"Could not open file track\");\n");
			bw.append("while (1);\n");
			bw.append("}\n");
			bw.append("}\n");
			bw.append("}\n");
			return true;
		}
		catch (Exception e) {
			e.printStackTrace();
			return false;
		}

	}
	public static boolean printToSerial(BufferedWriter bw, String out){
		try {
			bw.append("Serial.println(\""+out+"\");\n");

			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}

	}
}


