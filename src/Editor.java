import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;



public class Editor implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = -7794921541255885374L;

	private Song song;
	private long editorTime;
	boolean isPlaying;
	GUI gui;

	public Editor(Song s) {
		this.song = s;
		gui = new GUI(this);
		setEditorTime(0);
	}

	void stopTimer() {
		isPlaying = false;
		System.out.println("Stopped time: " + editorTime);
	}

	void startTimer() {
		(new Thread(new Timer(this))).start();
	}


	void refresh() {
		//Get list of cues
		this.song.getCues();
	}

	public static void main(String[] args) {
		Song s = new Song("Second Song", 60000);
		Editor e = new Editor(s);

		e.gui.printCues();

	}

	public boolean writeFile(){

		try {
			File file = new File(song.getTitle());
			if (!file.exists()) {
				if (file.mkdir()) {
					System.out.println("Directory is created!");
				} else {
					System.out.println("Failed to create directory!");
				}
			}
			file = new File(song.getTitle() +"/"+song.getTitle()+".txt");

			// if file doesn't exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			//Intro comment
			bw.append("/*\n");
			bw.append("This code has been generated by Song_Creater.java and is intended for an Arduino. \n Created by Aaron Pollon\n");
			bw.append("*/\n\n");
			//Setup method
			bw.append("void setup() {\n");
			Object[] chs = song.getChannels();

			try {
				for(int i=0; i<chs.length; i++) {
					if(chs[i] != null){
						Channel c = (Channel) chs[i];
						bw.append("pinMode(" + c.getArduinoPin() +", OUTPUT);\n");
					}
				}
			}
			catch(Exception e) {
				System.err.println("Error: Unable to print cues");
				bw.close();
				return false;
			}
			bw.append("}\n\n");

			//Loop
			bw.append("void loop() {\n");

			Object[] qs = song.getCues();

			for(int i=0; i<qs.length; i++) {
				Cue c = (Cue) qs[i];
				for(int j=0; j<c.getEvents().size(); j++) {
					LightEvent e = c.getEvents().get(j);
					bw.append("digitalWrite(" +e.channel.getChNum() +", ");
					if(e.on){
						bw.append("HIGH);");
					}
					else {
						bw.append("LOW);");
					}
					//Go to next line
					bw.append("\n");
				}
				//After each cue, place a delay equal to difference in timing
				//Check if there is another cue
				if(i<qs.length-1) {
					double delayTime = ((Cue) qs[i+1]).getRunTime() - c.getRunTime();
					bw.append("delay(" + delayTime +");\n");
				}
			}

			//End loop
			bw.append("}");


			bw.close();

			System.out.println("File Write Complete");

		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}

		return true;
	}

	public Song getCurrentSong() {
		return song;
	}

	public long getEditorTime() {
		return editorTime;
	}

	public void setEditorTime(long editorTime) {
		this.editorTime = editorTime;
	}


	public void addNewCue() {
		//Handle button click to add new cue
		NewCueWindow n = new NewCueWindow();
	}

}
