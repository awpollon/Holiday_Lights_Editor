import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;

import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;



public class Editor implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = -7794921541255885374L;

	private Song song;
	private long editorTime;
	boolean isPlaying;
	GUI gui;

	public Editor(Song s) {
		this.song = s;
		gui = new GUI(this);
		setEditorTime(0);
	}

	void stopTimer() {
		isPlaying = false;
		System.out.println("Stopped time: " + editorTime);
	}

	void startTimer() {
		(new Thread(new Timer(this))).start();
	}


	void refresh() {
		//Get list of cues
		this.song.getCues();
	}

	public static void main(String[] args) {
		Song s = new Song("Second Song", 60000);

		s.addChannel(new Channel("White Tree", 1, 2));
		s.addChannel(new Channel("Blue Tree", 2, 3));
		s.addChannel(new Channel("Blues", 3, 4));
		s.addChannel(new Channel("Whites", 4, 5));
		s.addChannel(new Channel("Wreaths", 5, 6));

		Editor e = new Editor(s);

		e.gui.printCues();

	}

	public boolean writeFile(){
				
		try {
			File file = new File(song.getTitle());
			if (!file.exists()) {
				if (file.mkdir()) {
					System.out.println("Directory is created!");
				} else {
					System.out.println("Failed to create directory!");
				}
			}
			file = new File(song.getTitle() +"/"+song.getTitle()+".txt");

			// if file doesn't exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}
			
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			//Intro comment
			bw.append("/*\n");
			bw.append("This code has been generated by Song_Creater.java and is intended for an Arduino. \n Created by Aaron Pollon\n");
			bw.append("*/\n\n");
			//Setup method
			bw.append("void setup() {\n");
			Object[] chs = song.getChannels();

			try {
				for(int i=0; i<chs.length; i++) {
					if(chs[i] != null){
						Channel c = (Channel) chs[i];
						bw.append("pinMode(" + c.getArduinoPin() +", OUTPUT);\n");
					}
				}
			}
			catch(Exception e) {
				System.err.println("Error: Unable to print cues");
				bw.close();
				return false;
			}
			bw.append("}\n\n");

			//Loop
			bw.append("void loop() {\n");

			Object[] qs = song.getCues();

			for(int i=0; i<qs.length; i++) {
				Cue c = (Cue) qs[i];
				for(int j=0; j<c.getEvents().size(); j++) {
					LightEvent e = c.getEvents().get(j);
					bw.append("digitalWrite(" +e.channel.getChNum() +", ");
					if(e.on){
						bw.append("HIGH);");
					}
					else {
						bw.append("LOW);");
					}
					//Go to next line
					bw.append("\n");
				}
				//After each cue, place a delay equal to difference in timing
				//Check if there is another cue
				if(i<qs.length-1) {
					double delayTime = ((Cue) qs[i+1]).getRunTime() - c.getRunTime();
					bw.append("delay(" + delayTime +");\n");
				}
			}

			//End loop
			bw.append("}");


			bw.close();

			System.out.println("File Write Complete");

		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}

		return true;
	}

	public Song getCurrentSong() {
		return song;
	}

	public long getEditorTime() {
		return editorTime;
	}

	public void setEditorTime(long editorTime) {
		this.editorTime = editorTime;
	}


	public void addNewCue() {
		//Handle button click to add new cue
		newCuePane();
		//		NewCueWindow n = new NewCueWindow();
	}

	public void newCuePane() {		
		JTextField cueTime = new JTextField(5);
		final JPanel myPanel = new JPanel();
		cueTime.setText("" + editorTime);
		//			JTextField channel = new JTextField(5);

		final ArrayList<eventInput> events = new ArrayList<eventInput>();

		//add initial event
		events.add(new eventInput(song));

		myPanel.add(new JLabel("Cue Time:"));
		myPanel.add(cueTime);
		myPanel.add(Box.createHorizontalStrut(15)); // a spacer

		myPanel.add(new JLabel("Channel:"));
		myPanel.add(events.get(0).channel);
		myPanel.add(Box.createHorizontalStrut(15)); // a spacer
		myPanel.add(new JLabel("State:"));
		myPanel.add(events.get(0).state);


		JButton addEvent = new JButton("Add Channels");
		addEvent.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				events.add(new eventInput(song));
				int i = events.size()-1;
				
				myPanel.add(Box.createHorizontalStrut(15)); // a spacer

				myPanel.add(new JLabel("Channel:"));
				myPanel.add(events.get(i).channel);
				myPanel.add(Box.createHorizontalStrut(15)); // a spacer
				myPanel.add(new JLabel("State:"));
				myPanel.add(events.get(i).state);
				
				myPanel.validate();
			}
		});
		
		myPanel.add(addEvent);

		int result = JOptionPane.showConfirmDialog(null, myPanel, 
				"New Cue", JOptionPane.OK_CANCEL_OPTION);
		
		if (result == JOptionPane.OK_OPTION) {
			//Validate input
			double qTime = Double.parseDouble(cueTime.getText());
			Cue tmp = new Cue(qTime);
			boolean success = true;
			
			
			if(qTime >=0) {
				for(int i=0; i<events.size(); i++) {
					boolean on = false;
					if(events.get(i).state.getSelectedItem().equals("On")) on = true;

					if(events.get(i).channel.getSelectedItem() != null) {
						tmp.addEvent(new LightEvent(((Channel) events.get(i).channel.getSelectedItem()), on));
					}
					else {
						System.err.println("Unable to add cue: Invalid Input.");
						success = false;
					}
				}
			}
			
			else {
				System.err.println("Unable to add cue: Invalid Cue Time.");
				success = false;
			}
			
			if(success) {
				//If input is valid, add cue and refresh
				song.addCue(tmp);
				gui.printCues();
				System.out.println("Cue added.");
			}
			else {
				System.err.println("Cue not added.");
			}
		}					
	}		
}

class eventInput {
	JComboBox channel;
	JComboBox state;
	String[] options = {"On", "Off"};

	public eventInput(Song s) {
		channel = new JComboBox(s.getChannels());
		state = new JComboBox(options);
	}
}