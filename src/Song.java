import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;


public class Song {
	private String title;
	private ArrayList<Cue> cues;
	private Show show;



	public Song(String songTitle, Show s) {
		this.title = songTitle;
		cues = new ArrayList<Cue>();
		this.show = s;
	}

	boolean addCue(Cue c) {
		return cues.add(c);
	}

	boolean removeCue(Cue c) {
		return cues.remove(c);
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public boolean writeFile(){
		try {

			File file = new File(title);
			if (!file.exists()) {
				if (file.mkdir()) {
					System.out.println("Directory is created!");
				} else {
					System.out.println("Failed to create directory!");
				}
			}
			file = new File(title +"/"+title+".txt");

			// if file doesn't exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			//Intro comment
			bw.append("/*\n");
			bw.append("This code has been generated by Song_Creater.java and is intended for an Arduino. Created by Aaron Pollon\n");
			bw.append("*/\n\n");
			//Setup method
			bw.append("void setup() {\n");
			for(int i=0; i<show.channels.length; i++) {
				if(show.channels[i] != null){
					Channel c = show.channels[i];
					bw.append("pinMode(" + c.getArduinoPin() +", OUTPUT);\n");
				}
			}
			bw.append("}\n\n");

			//Loop
			bw.append("void loop() {\n");



			for(int i=0; i<cues.size(); i++) {
				Cue c = cues.get(i);
				for(int j=0; j<c.getEvents().size(); j++) {
					LightEvent e = c.getEvents().get(j);
					bw.append("digitalWrite(" +e.channel.getChNum() +", ");
					if(e.on){
						bw.append("HIGH);");
					}
					else {
						bw.append("LOW);");
					}
					//Go to next line
					bw.append("\n");
				}
				//After each cue, place a delay equal to difference in timing
				//Check if there is another cue
				if(i<cues.size()-1) {
					double delayTime = cues.get(i+1).getRunTime() - c.getRunTime();
					bw.append("delay(" + delayTime +");\n");
				}
			}

			//End loop
			bw.append("}");


			bw.close();

			System.out.println("Done");

		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}

		return true;
	}

}

